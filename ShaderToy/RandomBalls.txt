#define t iTime
#define MAXSTEP 10
#define PI 3.14159265358979323846
#define TPI 6.28318530717958647692

float random(float val)
{
	return fract(sin(val * 12.9898) * 43756.5453123 );
}

float random(vec2 val)
{
	return fract(sin(dot(val.xy,vec2(12.9898,78.233))) * 43756.5453123 );
}

vec2 random2(float val)
{
	vec2 p = vec2(dot(vec2(val),vec2(127.1,311.7)),dot(vec2(val),vec2(269.5,183.3)) );
    return 2.0 * fract(sin(p) * 43758.5453123) - 1.0 ;
}

vec2 random2(vec2 val)
{
	vec2 p = vec2(dot(val,vec2(127.1,311.7)),dot(val,vec2(269.5,183.3)) );
    return 2.0 * fract(sin(p) * 43758.531545) - 1.0 ;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 p = (fragCoord.xy - (iResolution.xy / 2.0)) / min(iResolution.x,iResolution.y);
    vec2 mou = (iMouse.xy - (iResolution.xy / 2.0)) / min(iResolution.x,iResolution.y);
    vec3 col = vec3(0.0);
    
    
    vec3 m_dist = vec3(0.0);
    for(int i=0;i<MAXSTEP;++i)
    {
    	vec2 pos = random2(vec2(float(i),0.2)) * 0.2;
        float angle = mix(0.0, TPI, random(float(i)));
        float radius = mix(0.01, 0.2, random(float(i)));
        float freq = 1.0;
        if(random(float(i)) > 0.5)	freq = -1.0;
        vec2 offset = radius * vec2(sin(freq*t+angle), cos(freq*t + angle));
        
        m_dist.r += 1.0 / distance( p + vec2(0.00,0.00) , pos + offset);
        m_dist.g += 1.0 / distance( p + vec2(0.01,0.01) , pos + offset);
        m_dist.b += 1.0 / distance( p + vec2(0.05,0.00) , pos + offset);
    }
    
   	//m_dist.r -= 2.0 / distance( p + vec2(0.00,0.00) , mou);
    //m_dist.g -= 2.0 / distance( p + vec2(0.01,0.01) , mou);
    //m_dist.b -= 2.0 / distance( p + vec2(0.05,0.00) , mou);
    
    col += smoothstep(0.49,0.5,m_dist * 0.01);
   	fragColor = vec4(col,1.0);
}