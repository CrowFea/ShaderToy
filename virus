#define MAX_DIST 100.0

float map(vec3 pos)
{
	float d = length(pos)-1.5;
    float peak = sin(5.0*pos.x+iTime*2.0)*sin(5.0*pos.y+iTime*2.0)*sin(5.0*pos.z+iTime*2.0)*0.15;
    return d+peak;
}

vec3 calcNormal(vec3 pos)
{
	vec2 e = vec2(0.0001,0.0);
    return normalize(vec3(map(pos+e.xyy)-map(pos-e.xyy),
                          map(pos+e.yxy)-map(pos-e.yxy),
                          map(pos+e.yyx)-map(pos-e.yyx)));
}

float rayCast(vec3 ro,vec3 rd)
{
	float t =0.0;
    float h ;
    for(int i=0;i<255;++i)
    {
        vec3 pos = ro + t*rd;
    	float h = map(pos);
        if(h<0.0001)	break;
        t += h;
        if(h>MAX_DIST)	break;
    }
    return min(t,MAX_DIST);
}

vec3 rayDir(float fieldofView,vec2 size,vec2 fragCoord)
{
	vec2 xy = fragCoord - size/2.0;
    float z = size.y/tan(radians(fieldofView)/2.0);
    return normalize(vec3(xy,-z));
}

float flu(vec3 pos)
{
    vec3 lightPos = vec3(4.0*sin(iTime),2.0,4.0*cos(iTime));
    
	vec3 N = calcNormal(pos);
    vec3 L = normalize(lightPos-pos);
    float LN = dot(L,N);
   
    return (LN+1.0)/2.0;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 ro = vec3(0.0,0.0,10.0);
    vec3 rd = rayDir(60.0,iResolution.xy,fragCoord);
    
    vec3 col = vec3(0.0);
    float t = rayCast(ro,rd);
    if(t>MAX_DIST-0.0001)	col = vec3(0.0);
    else
    {
        vec3 pos = ro + t*rd;
        vec3 nor = calcNormal(pos);
        
        float k_d = flu(pos);
        col = 0.5 + 0.5*sin(iTime+pos.xyx+vec3(0,2,4));
        col = k_d * col;
    }
    fragColor = vec4(col,1.0);
}